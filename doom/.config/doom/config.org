#+title: Config
#+author: Troy Fischer
#+startup: fold

* Useful Documentation
** How to Rebind Keys!
+ [[https://discourse.doomemacs.org/t/how-to-re-bind-keys/56][hlissner documentation on key rebinding]]
* Basics
#+begin_src emacs-lisp
(setq user-full-name "Troy Fischer"
      user-mail-address "troytfischer@gmail.com"
      display-line-numbers-type t
      doom-theme 'doom-horizon
      password-cache-expiry nil   ;; only type password once
      delete-by-moving-to-trash t ;; move files to trash instead of perma deletion
      )

;; display time in modeline
(setq display-time-format "%m-%d-%y %l:%M %p"
      display-time-default-load-average nil)
(display-time-mode)

;; line numbers in all modes
(global-display-line-numbers-mode)

;; underline current cursor line
(defun +troy/set-underline ()
  (global-hl-line-mode 1)
  (setq doom--hl-line-mode t)
  (set-face-attribute hl-line-face nil :underline t)
  (set-face-background 'hl-line nil)
  (set-face-underline 'hl-line t)
  (set-face-attribute 'hl-line nil :inherit nil))
(defun +troy/load-theme ()
  (interactive)
  (call-interactively 'consult-theme)
  (+troy/set-underline))
(map! :leader :desc "load-theme" "h t" #'+troy/load-theme)
(+troy/set-underline)
(add-hook! (prog-mode text-mode conf-mode special-mode feature-mode) #'hl-line-mode)
#+end_src
* Fonts
+ Cascadia Code
+ Hack
+ Fira Code
+ Jetbrains Mono
+ Overpass
+ IBM Plex Mono
+ Source Code Pro

#+name: main-font
: Cascadia Code

#+name: variable-font
: Source Code Pro

#+begin_src emacs-lisp :var main-font=main-font variable-font=variable-font :results none
(setq +troy/mono-fonts '("Cascadia Code" "Hack" "Fira Code" "Jetbrains Mono" "IBM Plex Mono"))
(setq +troy/variable-fonts '("Overpass" "Source Code Pro"))
(setq +troy/font-types '("Code" "Variable"))

(defun +troy/read-font (fonts)
  (completing-read "Font: " fonts))
(defun +troy/read-face (faces)
  (completing-read "Font Type: " faces))

(defun +troy/change-font ()
  (interactive)
  (let ((face (+troy/read-face +troy/font-types)))
    (let ((font (+troy/read-font (if (string= face "Code") +troy/mono-fonts +troy/variable-fonts))))
      (if (string= face "Code") (+troy/set-mono-font font) (+troy/set-variable-font font))
      (message "%s font set to %s" face font)))
  (doom/reload-font))

(defun +troy/set-mono-font (f)
  (setq doom-font (font-spec :family f :size 15)
        doom-big-font (font-spec :family f :size 24)))

(defun +troy/set-variable-font (f)
  (setq doom-variable-pitch-font (font-spec :family f :size 15)))


(+troy/set-mono-font main-font)
(+troy/set-variable-font variable-font)

(map! :leader :desc "change font" "h r F" #'+troy/change-font)
#+end_src

* Dashboard
#+begin_src emacs-lisp
(setq +doom-dashboard-banner-file (expand-file-name "default-emacs.svg" doom-private-dir))  ;; use custom image as banner
#+end_src
* My Functions
** Project root
#+begin_src emacs-lisp
(defun +troy/get-current-project-root ()
  (expand-file-name (cdr (project-current))))
#+end_src
** Pipenv
#+begin_src emacs-lisp
(setq +troy/pipenv-root (expand-file-name "~/.local/share/virtualenvs"))

(defun +troy/get-pipenv-full-path ()
  (cd (+troy/get-current-project-root))
  (shell-command-to-string "echo -n $(pipenv --venv -q)"))

(defun +troy/get-pipenv-dir-name ()
  (if (+troy/get-virtual-env-exists)
      (file-name-nondirectory (+troy/get-pipenv-full-path))))

(defun +troy/set-pipenv-dir ()
  (let ((pipenv-dir (+troy/get-pipenv-dir-name)))
    (when pipenv-dir
      (setq python-shell-virtualenv-root (concat (file-name-as-directory +troy/pipenv-root) pipenv-dir)))))

(setq pipenv-with-projectile nil)

(defun +troy/pipenv-activate-setup ()
  (pipenv-deactivate)
  (let ((pipenv-dir (+troy/get-pipenv-dir-name)))
    (when pipenv-dir
      (setq python-shell-virtualenv-root (concat (file-name-as-directroy +troy/pipenv-root) pipenv-dir)
            lsp-pyright-venv-path +troy/pipenv-root
            lsp-pyright-venv-directory pipenv-dir
            lsp-pyright-python-executable-cmd (concat (file-name-as-directory +troy/pipenv-root) pipenv-dir "/bin/python"))))
  (pipenv-activate))

(defun +troy/get-virtual-env-exists ()
  (not (string-match-p "No virtualenv" (+troy/get-pipenv-full-path))))

(defun +troy/projectile-pipenv-hook ()
  (let ((pipfile-exists (file-exists-p (concat (projectile-project-root) "Pipfile"))))
    (if (and pipfile-exists (+troy/get-virtual-env-exists))
        (+troy/pipenv-activate-setup) (pipenv-deactivate))))

(defun +troy/get-pipenv-dir ()
  (cd (+troy/get-current-project-root))
  (shell-command-to-string "echo -n $(pipenv --venv -q)"))

;; (add-hook! 'projectile-after-switch-project-hook #'+troy/projectile-pipenv-hook)
#+end_src
** Open Pycharm from current project
#+begin_src elisp
(defun +troy/open-project-in-pycharm ()
  (interactive)
  (async-shell-command (format "open -na 'PyCharm CE.app' --args %s" (projectile-project-root)))
  (doom/window-maximize-buffer))
#+end_src
** Open Neovim
#+begin_src emacs-lisp
(defun +troy/open-project-in-neovim ()
  (interactive)
  (call-process-shell-command (format "alacritty -e nvim %s" (projectile-project-root)) nil 0))
(defun +troy/open-file-in-neovim ()
  (interactive)
  (call-process-shell-command (format "alacritty -e nvim %s" (buffer-file-name)) nil 0))
#+end_src
* Dired
#+begin_src emacs-lisp
(use-package! dired-x
  :config
  (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$") ;; hides dotfiles
        dired-omit-files (concat dired-omit-files "\\|__pycache__") ;; hides __pycache__
        dired-deletion-confirmer #'y-or-n-p
        dired-open-extensions '(("mkv" . "mpv")
                                ("mp4" . "mpv"))))
#+end_src
* Evil
#+begin_src emacs-lisp
(setq evil-kill-on-visual-paste nil)
(map! :i "C-y" #'yank)
(map! :leader
      (:prefix-map
       ("y" . "yank")
       :desc "org-yank-link" "o" #'link-hint-copy-link-at-point
       :desc "magit-yank-link" "g" #'forge-copy-url-at-point-as-kill))
#+end_src
* Feature Mode
#+begin_src emacs-lisp
(use-package! feature-mode
  :config
  (add-to-list 'auto-mode-alist '("\.feature$" . feature-mode)))
#+end_src
* Programming Language Configurations
** Python
*** run-python shell
#+begin_src emacs-lisp
(setq python-shell-completion-native-enable nil)
#+end_src
*** LSP
#+begin_src emacs-lisp
(use-package! lsp-diagnostics
  :after flycheck
  :config
  (lsp-diagnostics-flycheck-enable))
#+end_src
**** Jedi
#+begin_src sh :tangle no
pip3 install -U jedi-language-server
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package! lsp-jedi
  :ensure nil
  :config
  (with-eval-after-load "lsp-mode"
    (add-to-list 'lsp-disabled-clients 'pyls)
    (add-to-list 'lsp-enabled-clients 'jedi))
  (add-to-list 'lsp-jedi-python-library-directories "~/.local/share/virtualenvs"))
#+end_src
**** Python Language Server
[[https://github.com/python-lsp/python-lsp-server][Repository]]
#+begin_src sh :tangle no
pip3 install --user python-lsp-server
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package! lsp-pylsp
  :ensure t
  :config
  (setq lsp-pylsp-plugins-flake8-enabled t
        lsp-pylsp-plugins-flake8-max-line-length 100
        lsp-pylsp-plugins-autopep8-enabled nil
        lsp-pylsp-plugins-pylint-enabled-nil
        lsp-pylsp-plugins-pycodestyle-enabled nil
        lsp-pylsp-plugins-pydocstyle-enabled nil))
#+end_src
**** Pyright
:PROPERTIES:
:ID:       b1a15861-4228-4df5-9552-8f4975a59314
:END:
#+begin_src emacs-lisp
(use-package! lsp-pyright
  :hook
  ((python-mode . (lambda ()
                    (lsp-deferred)))
   (flycheck-mode . (lambda ()
                      (flycheck-add-next-checker 'lsp 'python-flake8)
                      (flycheck-add-next-checker 'python-flake8 'python-pylint))))
  :config
  (setq lsp-pyright-venv-directory "~/.local/share/virtualenvs"
        lsp-pyright-typechecking-mode "off"))
#+end_src
***** LSP PYRIGHT MULTIROOT ISSUE
When pyright has ~lsp-pyright-multi-root~ set to ~t~ it runs a single server for
every python project it initializes in. On MacOS this has given me trouble with
~too many open files~ issues. To prevent that I've set the variable to nil in [[file:~/.config/emacs/modules/lang/python/config.el::setq lsp-pyright-multi-root
nil][.config/emacs/modules/lang/python/config.el]].

After setting the variable delete the lsp-session file in
[[file:~/.config/emacs/.local/cache/]] (or delete the entire directory which will have
other repercussions like needing to re-add projects to projectile)
***** Necessary programs
****** Pyright
Doom emacs will prompt to install this server automatically but if that doesn't work...
#+begin_src sh :tangle no
pip3 install -U pyright
#+end_src
****** Flycheck Checkers
Need to install ~pylint~ and ~flake8~ for flycheck.
#+begin_src sh :tangle no
brew install flake8 pylint
#+end_src
*** Debugging
=debugpy= is recommended
#+begin_src sh :tangle no
pip3 install -U debugpy ptvsd pytest behave
#+end_src

#+begin_src emacs-lisp
(after! dap-mode
  (setq dap-python-executable "python3")
  (setq dap-python-debugger 'debugpy)
  (require 'dap-python))
(defun refresh-breakpoints ()
  (interactive)
  (set-window-buffer nil (current-buffer)))
#+end_src
**** Key Mapping
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("d" . "debug")
       :desc "dap-breakpoint-toggle" "t" #'dap-breakpoint-toggle
       :desc "dap-debug" "d" #'dap-debug
       :desc "dap-debug-recent" "r" #'dap-debug-recent
       :desc "dap-debug-last" "l" #'dap-debug-last
       :desc "dap-debug-edit-template" "e" #'dap-debug-edit-template
       :desc "dap-next" "n" #'dap-next
       :desc "refresh breakpoints" "R" #'refresh-breakpoints
       :desc "disconnect" "q" #'dap-disconnect
       (:prefix-map ("u" . "ui")
        :desc "dap-ui-breakpoints-list" "l" #'dap-ui-breakpoints-list
        :desc "dap-ui-breakpoints-delete" "d" #'dap-ui-breakpoints-delete)))
#+end_src
**** Issue with dap-python
[[file:~/.config/emacs/.local/straight/repos/dap-mode/dap-python.el::let* ((python-executable (dap-python--pyenv-executable-find dap-python-executable)][Link to file on system]]
I have been changing this line: https://github.com/emacs-lsp/dap-mode/blob/c72ac1b1a5811cfda3c6740bcf24c67222b6c840/dap-python.el#L174 to
#+begin_src emacs-lisp :tangle no
(let* ((python-executable (executable-find dap-python-executable))
#+end_src
Because in general I'm using ~pipenv~ rather than ~pyvenv~
**** Custom Dap Template
***** Behave
#+begin_src emacs-lisp :tangle no
(defun +troy/add-behave-template ()
  (dap-register-debug-template
   "Python :: Run behave (buffer)"
   (list :type "python"
         :args "tests/features"
         :cwd (+troy/get-current-project-root)
         :program nil
         :module "behave"
         :request "launch"
         :name "Python :: Run behave (buffer)")))
(add-hook! 'python-mode-hook #'+troy/add-behave-template)
#+end_src
*** Formatting
**** Necessary programs
#+begin_src sh :tangle no
brew install black
#+end_src
**** Optimize Imports
#+begin_src emacs-lisp :tangle no
(use-package! py-isort
  :after python
  :hook ((before-save . py-isort-before-save)))
#+end_src
***** Pip
#+begin_src sh :tangle no
pip3 install -U pyflakes isort
#+end_src
***** Homebrew
#+begin_src sh :tangle no
brew install isort
#+end_src
*** Add Pip executables to path
#+begin_src emacs-lisp
(let ((pip-path (concat (shell-command-to-string "echo -n $(python3 -m site --user-base)") "/bin")))
  (add-to-list 'exec-path pip-path))
#+end_src
*** Set virtual env
#+begin_src emacs-lisp
(add-hook! 'python-mode-hook #'+troy/set-pipenv-dir)
#+end_src
** Java
#+begin_src emacs-lisp :tangle no
(use-package! lsp-java
  :config
  (setq lsp-java-code-generation-hash-code-equals-use-java7objects t))
#+end_src
* Breadcrumbs
#+begin_src emacs-lisp
(use-package! lsp-mode
  :config
  (setq lsp-headerline-breadcrumb-enable t)
  (map! :leader :after lsp-mode "c R" #'lsp-workspace-restart))
#+end_src
* Org
** Config
#+begin_src emacs-lisp
(use-package! org
  :ensure nil
  :config
  (defvar +troy/main-org-agenda-file (expand-file-name (concat org-directory "/agenda.org")))
  (setq org-directory "~/org/"
        org-agenda-files (list +troy/main-org-agenda-file)
        org-default-notes-file (concat org-directory "notes.org")
        org-agenda-span 30
        org-hide-emphasis-markers t)
  (add-to-list 'org-refile-targets '(org-default-notes-file :maxlevel . 3))
  ;; disable org mode auto complete suggestions
  (add-hook! 'org-mode-hook #'(lambda () (company-mode -1))))
#+end_src
** Agenda
*** Keybinding to open agenda.org
#+begin_src emacs-lisp
(defun +troy/open-org-agenda ()
  (interactive)
  (find-file +troy/main-org-agenda-file))
(map! :leader
      :desc "Open agenda.org" "o a o" #'+troy/open-org-agenda)
#+end_src
** ob-http
[[https://github.com/zweifisch/ob-http][Repository]]
Package to do Postman like things in org mode.
#+begin_src emacs-lisp
(use-package! ob-http
  :ensure nil
  :config
  (add-to-list 'org-babel-load-languages '(http . t)))
#+end_src
** Latex
See [[https://emacs.stackexchange.com/questions/79285/why-is-org-highlight-latex-and-related-messing-with-org-hyperlink-description][link]] for =org-highlight-latex-and-related= details. Without that setting the org syntax highlighting gets messed up.
#+begin_src emacs-lisp
(after! org
  (use-package! ox-extra
    :config
    (ox-extras-activate '(latex-header-blocks ignore-headlines)))

  ;; Import ox-latex to get org-latex-classes and other funcitonality
  ;; for exporting to LaTeX from org
  (use-package! ox-latex
    :init
    ;; code here will run immediately
    :config
    ;; code here will run after the package is loaded
    (setq org-latex-with-hyperref nil) ;; stop org adding hypersetup{author..} to latex export
    ;; (setq org-latex-prefer-user-labels t)

    (setq org-highlight-latex-and-related '(script entities))
    ;; deleted unwanted file extensions after latexMK
    (setq org-latex-logfiles-extensions
          (quote ("xdv" "lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "xmpi" "run.xml" "bcf" "acn" "acr" "alg" "glg" "gls" "ist")))

    (unless (boundp 'org-latex-classes)
      (setq org-latex-classes nil)))
  )
#+end_src
* Password Store Keybindings
#+begin_src emacs-lisp
(defun +troy/password-store-dir ()
  (find-file "~/.password-store"))
(defun +troy/git-password-store ()
  (interactive)
  (+troy/password-store-dir)
  (magit))
(map! :leader
      (:prefix-map ("P" . "Passwords")
       :desc "password-store-copy" "c" #'password-store-copy
       :desc "password-store-edit" "e" #'password-store-edit
       :desc "password-store-otp-token-copy" "o" #'password-store-otp-token-copy
       :desc "password-store-git" "g" #'+troy/git-password-store))
#+end_src
* Projectile
#+begin_src emacs-lisp
(map! :leader :desc "ripgrep" "p G" #'projectile-ripgrep)
(map! :leader :desc "PyCharm" "p P" #'+troy/open-project-in-pycharm)
(map! :leader :desc "Neovim" "p N" #'+troy/open-project-in-neovim)
(map! :leader :desc "Neovim" "p n" #'+troy/open-file-in-neovim)
#+end_src
* Vertico
#+begin_src emacs-lisp
(map! :map vertico-map "C-l" #'+vertico/enter-or-preview) ;; allow C-l to select an item
#+end_src
* Vterm
#+begin_src emacs-lisp
(use-package! vterm
  :ensure nil
  :config
  (map! :map vterm-mode-map
        :i "C-y" #'vterm-yank
        :i "C-k" #'vterm-send-up
        :i "C-j" #'vterm-send-down))
#+end_src
* Blog
*NOTE* you need to copy the font awesome directory yourself. This saves a lot of time when exporting static assets.
#+begin_src emacs-lisp
(setq org-html-head-include-default-style nil)
(setq org-publish-project-alist
      '(
        ("blog-html"
         :recursive t
         :base-directory "~/blog/content"
         :publishing-directory "~/blog/public"
         :publishing-function org-html-publish-to-html
         :section-numbers nil

         )
        ("blog-static"
         :base-directory "~/blog/content/"
         :base-extension "css\\|js\\|png\\|jpg\\|jpeg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|ico"
         :publishing-directory "~/blog/public/"
         :recursive t
         :publishing-function org-publish-attachment
         )
        ("blog" :components ("blog-html" "blog-static"))))
(defun +troy/publish-blog-remote ()
  (interactive)
  (async-shell-command "rsync -e ssh -uvrz ~/blog/public/ root@165.227.115.74:/var/www/html/ --delete --chmod=Du=rwx,Dgo=rx,Fu=rw,Fog=r"))
#+end_src
** Note on table of contents
#+begin_quote
Org normally inserts the table of contents directly before the first headline of the file. To move the table of contents to a different location, first turn off the default with org-export-with-toc variable or with ‘#+OPTIONS: toc:nil’. Then insert ‘#+TOC: headlines N’ at the desired location(s).
#+end_quote

[[https://orgmode.org/manual/Table-of-Contents.html][Org TOC manual]]
* Proxies
#+begin_src emacs-lisp :tangle no
;; (setq url-proxy-services '(("http" . "someproxy.proxy.hostname.com:port")
;;                            ("https" . "someproxy.proxy.hostname.com:port")))
#+end_src
* Auth Sources
#+begin_src emacs-lisp
(setq auth-sources '("~/.authinfo.gpg"))
#+end_src
* Forge
** Corporate Examples
#+begin_src emacs-lisp :tangle no
;; (with-eval-after-load 'forge (add-to-list 'forge-alist '("github.cloud.company.com" "github.cloud.company.com/api/v3" "github.cloud.company.com" forge-github-repository)))
;; (with-eval-after-load 'browse-at-remote (add-to-list 'browse-at-remote-remote-type-regexps `(:host ,(rx bol "github.cloud.company.com" eol) :type "github" :actual-host "github.cloud.company.com")))
#+end_src
* Code Review
Config: [[https://github.com/wandersoncferreira/code-review]]
#+begin_src emacs-lisp
(setq code-review-auth-login-marker 'forge)
(add-hook 'code-review-mode-hook #'emojify-mode)
(add-hook 'code-review-mode-hook
          (lambda ()
            ;; include *Code-Review* buffer into current workspace
            (persp-add-buffer (current-buffer))))

(setq code-review-lgtm-message "LGTM ✏")
#+end_src
** Corporate Examples
#+begin_src emacs-lisp :tangle no
;; (setq code-review-github-host "github.cloud.company.com/api/v3"
;;       code-review-github-base-url "github.cloud.company.com"
;;       code-review-github-graphql-host "github.cloud.company.com/api")
#+end_src
* Swiper
#+begin_src emacs-lisp
(map! "C-s" #'swiper-isearch)
(map! :map ivy-minibuffer-map
      "C-j" #'ivy-next-line
      "C-k" #'ivy-previous-line)
#+end_src

* Json
#+begin_src emacs-lisp
(add-hook 'json-mode-hook (lambda ()
                            (make-local-variable 'js-indent-level)
                            (setq js-indent-level 2)))
#+end_src
* Bogiefile
[[https://emacs.stackexchange.com/questions/12396/run-command-when-opening-a-file-of-a-specific-filetype][Associate Major Mode with certain files]]
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("Bogiefile" . yaml-mode))
#+end_src
* Jira
[[https://github.com/ahungry/org-jira][Org Jira Docs]]
#+begin_src emacs-lisp :tangle no
(use-package! org-jira
  :ensure nil
  :defer t ;; breaking epg when not deferred
  :config
  (setq org-jira-done-states '("Closed" "Resolved" "Done" "Accepted"))
  (setq org-jira-working-dir (concat org-directory "jira"))
  (setq jiralib-url "https://company.jira.com")
  (setq jiralib-token
        (cons "Authorization"
              (concat "Bearer " (auth-source-pick-first-password
                                 :host "company.jira.com"))))
  (setq org-jira-custom-jqls
        '(
          (:jql " project = Software AND Team = \"Software Devs\" AND Sprint in openSprints() AND resolution = unresolved ORDER BY Rank ASC "
           :filename "current_sprint")))
  (defun +troy/org-jira-update-issue-details-no-reporter (issue-id filename &rest rest)
    "Update the details of issue ISSUE-ID in FILENAME.  REST will contain optional input."
    (ensure-on-issue-id-with-filename issue-id filename
                                      ;; Set up a bunch of values from the org content
                                      (let* ((org-issue-components (org-jira-get-issue-val-from-org 'components))
                                             (org-issue-labels (org-jira-get-issue-val-from-org 'labels))
                                             (org-issue-description (org-trim (org-jira-get-issue-val-from-org 'description)))
                                             (org-issue-priority (org-jira-get-issue-val-from-org 'priority))
                                             (org-issue-type (org-jira-get-issue-val-from-org 'type))
                                             (org-issue-type-id (org-jira-get-issue-val-from-org 'type-id))
                                             (org-issue-assignee (cl-getf rest :assignee (org-jira-get-issue-val-from-org 'assignee)))
                                             (project (replace-regexp-in-string "-[0-9]+" "" issue-id))
                                             (project-components (jiralib-get-components project)))

                                        ;; Lets fire off a worklog update async with the main issue
                                        ;; update, why not?  This is better to fire first, because it
                                        ;; doesn't auto-refresh any areas, while the end of the main
                                        ;; update does a callback that reloads the worklog entries (so,
                                        ;; we hope that wont occur until after this successfully syncs
                                        ;; up).  Only do this sync if the user defcustom defines it as such.
                                        (when org-jira-worklog-sync-p
                                          (org-jira-update-worklogs-from-org-clocks))

                                        ;; Send the update to jira
                                        (let ((update-fields
                                               (list (cons
                                                      'components
                                                      (or (org-jira-build-components-list
                                                           project-components
                                                           org-issue-components) []))
                                                     (cons 'description org-issue-description)
                                                     )))


                                          ;; If we enable duedate sync and we have a deadline present
                                          (when (and org-jira-deadline-duedate-sync-p
                                                     (org-jira-get-issue-val-from-org 'deadline))
                                            (setq update-fields
                                                  (append update-fields
                                                          (list (cons 'duedate (org-jira-get-issue-val-from-org 'deadline))))))

                                          ;; TODO: We need some way to handle things like assignee setting
                                          ;; and refreshing the proper issue in the proper buffer/filename.
                                          (jiralib-update-issue
                                           issue-id
                                           update-fields
                                           ;; This callback occurs on success
                                           (org-jira-with-callback
                                            (message (format "Issue '%s' updated!" issue-id))
                                            (jiralib-get-issue
                                             issue-id
                                             (org-jira-with-callback
                                              (org-jira-log "Update get issue for refresh callback hit.")
                                              (-> cb-data list org-jira-get-issues))))
                                           ))
                                        )))


  (defun +troy/org-jira-update-issue-description ()
    (interactive)
    (let ((issue-id (org-jira-parse-issue-id))
          (filename (org-jira-parse-issue-filename)))
      (if issue-id
          (+troy/org-jira-update-issue-details-no-reporter issue-id filename)
        (error "Not on an issue"))
      )
    )

  )
#+end_src
* Smooth Scroll
Smooth scrolling provided in emacs 29!
#+begin_src emacs-lisp
(when (version<= "29" emacs-version)
  (setq pixel-scroll-precision-mode t))
#+end_src
* Temporary Fix for too many open files
[[https://www.blogbyben.com/2022/05/gotcha-emacs-on-mac-os-too-many-files.html][Link to where I found the code]]
I was having issues with [[*Pyright][Pyright]] that was causing this issue but since fixing that this hasn't been needed. It didn't actually solve the problem either but provided a temporary fix until I could restart Emacs.
#+begin_src emacs-lisp
(defun file-notify-rm-all-watches ()
  "Remove all existing file notification watches from Emacs."
  (interactive)
  (maphash
   (lambda (key _value)
     (file-notify-rm-watch key))
   file-notify-descriptors))
#+end_src
* Screenshot.el
+ [[https://github.com/tecosaur/screenshot][Github]] 
+ ~x-export-frames~ is not available on macos
#+begin_src emacs-lisp
(when (not (eq system-type 'darwin))
  (use-package! screenshot))
#+end_src
