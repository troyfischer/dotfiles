#+title: Config
#+author: Troy Fischer
#+startup: fold

* Basics
#+begin_src emacs-lisp
(setq user-full-name "Troy Fischer"
      user-mail-address "troytfischer@gmail.com"
      display-line-numbers-type t
      doom-theme 'doom-solarized-light
      password-cache-expiry nil   ;; only type password once
      delete-by-moving-to-trash t ;; move files to trash instead of perma deletion
      doom-font (font-spec :family "Fira Code" :size 15)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 15)
      doom-big-font (font-spec :family "Fira Code" :size 24))

;; display time in modeline
(setq display-time-format "%m-%d-%y %l:%M %p"
      display-time-default-load-average nil)
(display-time-mode)

;; line numbers in all modes
(global-display-line-numbers-mode)

;; underline current cursor line
(defun +troy/set-underline ()
  (global-hl-line-mode 1)
  (setq doom--hl-line-mode t)
  (set-face-attribute hl-line-face nil :underline t)
  (set-face-background 'hl-line nil)
  (set-face-underline 'hl-line t)
  (set-face-attribute 'hl-line nil :inherit nil))
(defun +troy/load-theme ()
  (interactive)
  (call-interactively 'consult-theme)
  (+troy/set-underline))
(map! :leader :desc "load-theme" "h t" #'+troy/load-theme)
(+troy/set-underline)
(add-hook! (prog-mode text-mode conf-mode special-mode feature-mode) #'hl-line-mode)
#+end_src
* Dashboard
#+begin_src emacs-lisp
(setq +doom-dashboard-banner-file (expand-file-name "default-emacs.svg" doom-private-dir))  ;; use custom image as banner
#+end_src
* My Functions
** Project root
#+begin_src emacs-lisp
(defun +troy/get-current-project-root ()
  (expand-file-name (car (last (project-current)))))
#+end_src
** Pipenv
#+begin_src emacs-lisp
(defun +troy/get-pipenv-dir ()
  (cd (+troy/get-current-project-root))
  (shell-command-to-string "echo -n $(pipenv --venv -q)"))
(defun +troy/set-pipenv-dir ()
  (setq python-shell-virtualenv-root (+troy/get-pipenv-dir)))
#+end_src
* Dired
#+begin_src emacs-lisp
(use-package! dired-x
  :config
  (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$") ;; hides dotfiles
        dired-deletion-confirmer #'y-or-n-p
        dired-open-extensions '(("mkv" . "mpv")
                                ("mp4" . "mpv"))))
#+end_src
* Evil
#+begin_src emacs-lisp
(setq evil-kill-on-visual-paste nil) ;; pasting in visual state does not add replaced text to kill ring
(map! :i "C-y" #'yank) ;; paste in insert using C-y
#+end_src
* Lsp
** Java
#+begin_src emacs-lisp
(use-package! lsp-java
  :config
  (setq lsp-java-code-generation-hash-code-equals-use-java7objects t))
#+end_src
** Python
*** Feature Mode
#+begin_src emacs-lisp
(use-package! feature-mode
  :config
  (add-to-list 'auto-mode-alist '("\.feature$" . feature-mode)))
#+end_src
*** Format On Save
#+begin_src emacs-lisp
(add-hook 'python-mode-hook #'format-all-mode)
#+end_src
*** Jedi
Jedi is working best so far. Install via:
#+begin_src sh :tangle no
pip3 install -U jedi-language-server
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package! lsp-jedi
  :ensure nil
  :config
  (with-eval-after-load "lsp-mode"
    (add-to-list 'lsp-disabled-clients 'pyls)
    (add-to-list 'lsp-enabled-clients 'jedi))
  (add-to-list 'lsp-jedi-python-library-directories "~/.local/share/virtualenvs"))
#+end_src
*** Pyright
#+begin_src sh :tangle no
pip3 install -U pyright
#+end_src

#+begin_src emacs-lisp
(use-package! lsp-pyright
  :config
  (setq lsp-pyright-venv-directory "~/.local/share/virtualenvs"))
#+end_src
*** Optimize Imports
#+begin_src sh :tangle no
pip3 install -U pyflakes isort
#+end_src
*** Debugging
=debugpy= is recommended
#+begin_src sh :tangle no
pip3 install -U debugpy ptvsd pytest behave
#+end_src

#+begin_src emacs-lisp
(after! dap-mode
  (setq dap-python-executable "python3")
  (setq dap-python-debugger 'debugpy)
  (require 'dap-python))
(defun refresh-breakpoints ()
  (interactive)
  (set-window-buffer nil (current-buffer)))
(map! :leader
      (:prefix-map ("d" . "debug")
       :desc "dap-breakpoint-toggle" "t" #'dap-breakpoint-toggle
       :desc "dap-debug" "d" #'dap-debug
       :desc "dap-debug-recent" "r" #'dap-debug-recent
       :desc "dap-debug-last" "l" #'dap-debug-last
       :desc "dap-debug-edit-template" "e" #'dap-debug-edit-template
       :desc "dap-next" "n" #'dap-next
       :desc "refresh breakpoints" "R" #'refresh-breakpoints
       (:prefix-map ("u" . "ui")
        :desc "dap-ui-breakpoints-list" "l" #'dap-ui-breakpoints-list
        :desc "dap-ui-breakpoints-delete" "d" #'dap-ui-breakpoints-delete)))
#+end_src
*** Add Pip executables to path
#+begin_src emacs-lisp
(let ((pip-path (concat (shell-command-to-string "echo -n $(python3 -m site --user-base)") "/bin")))
  (add-to-list 'exec-path pip-path))
#+end_src
*** Set virtual env
#+begin_src emacs-lisp
(add-hook! 'python-mode-hook #'+troy/set-pipenv-dir)
#+end_src
*** Custom Dap Template
Add behave configuration every time I open a python file. This could potentially be more accurate but works for now.
#+begin_src emacs-lisp
(defun +troy/add-behave-template ()
  (dap-register-debug-template
   "Python :: Run behave (buffer)"
   (list :type "python"
         :args ""
         :cwd nil
         :program (concat (+troy/get-current-project-root) "tests/features")
         :module "behave"
         :request "launch"
         :name "Python :: Run behave (buffer)")))
(add-hook! 'python-mode-hook #'+troy/add-behave-template)
#+end_src
* Org
** Config
#+begin_src emacs-lisp
(use-package! org
  :ensure nil
  :config
  (defvar +troy/main-org-agenda-file (expand-file-name (concat org-directory "/agenda.org")))
  (setq org-directory "~/org/"
        org-agenda-files (list +troy/main-org-agenda-file)
        org-default-notes-file (concat org-directory "notes.org")
        org-agenda-span 30
        org-hide-emphasis-markers t)
  (add-to-list 'org-refile-targets '(org-default-notes-file :maxlevel . 3))
  ;; disable org mode auto complete suggestions
  (add-hook! 'org-mode-hook #'(lambda () (company-mode -1))))
#+end_src
** Agenda
*** Keybinding to open agenda.org
#+begin_src emacs-lisp
(defun +troy/open-org-agenda ()
  (interactive)
  (find-file +troy/main-org-agenda-file))
(map! :leader
      :desc "Open agenda.org" "o a o" #'+troy/open-org-agenda)
#+end_src
* Password Store Keybindings
#+begin_src emacs-lisp
(defun +troy/password-store-dir ()
  (find-file "~/.password-store"))
(defun +troy/git-password-store ()
  (interactive)
  (+troy/password-store-dir)
  (magit))
(map! :leader
      (:prefix-map ("P" . "Passwords")
       :desc "password-store-copy" "c" #'password-store-copy
       :desc "password-store-edit" "e" #'password-store-edit
       :desc "password-store-otp-token-copy" "o" #'password-store-otp-token-copy
       :desc "password-store-git" "g" #'+troy/git-password-store))
#+end_src
* Projectile
#+begin_src emacs-lisp
(map! :leader :desc "ripgrep" "p G" #'projectile-ripgrep)
#+end_src
* Vertico
#+begin_src emacs-lisp
(map! :map vertico-map "C-l" #'vertico-directory-enter) ;; allow C-l to select an item
#+end_src
* Vterm
#+begin_src emacs-lisp
(use-package! vterm
  :ensure nil
  :config
  (map! :map vterm-mode-map
        :i "C-y" #'vterm-yank
        :i "C-k" #'vterm-send-up
        :i "C-j" #'vterm-send-down))
#+end_src
* Z-Notes
Potentially helpful hints.
#+begin_src emacs-lisp :tangle no
;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src

#+RESULTS:

* Blog
*NOTE* you need to copy the font awesome directory yourself. This saves a lot of time when exporting static assets.
#+begin_src emacs-lisp
(setq org-html-head-include-default-style nil)
(setq org-publish-project-alist
      '(
        ("blog-html"
         :recursive t
         :base-directory "~/blog/content"
         :publishing-directory "~/blog/public"
         :publishing-function org-html-publish-to-html
         :section-numbers nil

         )
        ("blog-static"
         :base-directory "~/blog/content/"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory "~/blog/public/"
         :recursive t
         :publishing-function org-publish-attachment
         )
        ("blog" :components ("blog-html" "blog-static"))))
(defun +troy/publish-blog-remote ()
  (interactive)
  (async-shell-command "rsync -e ssh -uvrz ~/blog/public/ root@165.227.115.74:/var/www/html/ --delete"))
#+end_src
** Note on table of contents
#+begin_quote
Org normally inserts the table of contents directly before the first headline of the file. To move the table of contents to a different location, first turn off the default with org-export-with-toc variable or with ‘#+OPTIONS: toc:nil’. Then insert ‘#+TOC: headlines N’ at the desired location(s).
#+end_quote

[[https://orgmode.org/manual/Table-of-Contents.html][Org TOC manual]]
* Proxies
#+begin_src emacs-lisp :tangle no
;; (setq url-proxy-services '(("http" . "someproxy.proxy.hostname.com:port")
;;                            ("https" . "someproxy.proxy.hostname.com:port")))
#+end_src
* Auth Sources
#+begin_src emacs-lisp
(setq auth-sources '("~/.authinfo.gpg"))
#+end_src
* Forge
** Corporate Examples
#+begin_src emacs-lisp :tangle no
;; (with-eval-after-load 'forge (add-to-list 'forge-alist '("github.cloud.company.com" "github.cloud.company.com/api/v3" "github.cloud.company.com" forge-github-repository)))
;; (with-eval-after-load 'browse-at-remote (add-to-list 'browse-at-remote-remote-type-regexps '("^github\\.cloud\\.company\\.com$" . "github")))
#+end_src
* Code Review
Config: [[https://github.com/wandersoncferreira/code-review]]
#+begin_src emacs-lisp
(setq code-review-auth-login-marker 'forge)
(add-hook 'code-review-mode-hook #'emojify-mode)
(add-hook 'code-review-mode-hook
          (lambda ()
            ;; include *Code-Review* buffer into current workspace
            (persp-add-buffer (current-buffer))))
#+end_src
** Corporate Examples
#+begin_src emacs-lisp :tangle no
;; (setq code-review-github-host "github.cloud.company.com/api/v3"
;;       code-review-github-base-url "github.cloud.company.com"
;;       code-review-github-graphql-host "github.cloud.company.com/api")
#+end_src
* org-core-fold-region missing spec bug fix
#+begin_src emacs-lisp
(setq org-fold-core-style 'overlay)
#+end_src
