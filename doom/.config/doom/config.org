#+title: Config
#+author: Troy Fischer
#+startup: fold

Do I need this? Not sure tbh.
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src
* Basics
#+begin_src emacs-lisp
(setq user-full-name "Troy Fischer"
      user-mail-address "troytfischer@gmail.com"
      display-line-numbers-type t
      doom-theme 'doom-one
      password-cache-expiry nil   ;; only type password once
      delete-by-moving-to-trash t ;; move files to trash instead of perma deletion
      doom-font (font-spec :family "JetBrainsMono Nerd Font Mono" :size 15)
      doom-variable-pitch-font (font-spec :family "Source Sans Pro" :size 15)
      doom-big-font (font-spec :family "JetBrainsMono Nerd Font Mono" :size 24))

;; display time in modeline
(setq display-time-mode t
      display-time-format "%l:%M %p"
      display-time-default-load-average nil)
#+end_src
* Dashboard
#+begin_src emacs-lisp
(setq +doom-dashboard-banner-file (expand-file-name "default-emacs.svg" doom-private-dir))  ;; use custom image as banner
#+end_src
* Dired
#+begin_src emacs-lisp
(use-package! dired-x
  :config
  (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$") ;; hides dotfiles
        dired-deletion-confirmer #'y-or-n-p
        dired-open-extensions '(("mkv" . "mpv")
                                ("mp4" . "mpv"))))
#+end_src
* Evil
#+begin_src emacs-lisp
(setq evil-kill-on-visual-paste nil) ;; pasting in visual state does not add replaced text to kill ring
#+end_src
* Lsp
** Java
#+begin_src emacs-lisp
(use-package! lsp-java
  :config
  (setq lsp-java-code-generation-hash-code-equals-use-java7objects t))
#+end_src
** Python
Jedi is working best so far. Install via:
#+begin_src sh :tangle no
pip3 install -U jedi-language-server
#+end_src

#+begin_src emacs-lisp
(use-package! lsp-jedi
  :ensure nil
  :config
  (with-eval-after-load "lsp-mode"
    (add-to-list 'lsp-disabled-clients 'pyls)
    (add-to-list 'lsp-enabled-clients 'jedi))
  (add-to-list 'lsp-jedi-python-library-directories "~/.local/share/virtualenvs"))
#+end_src
*** Pyvenv
#+begin_src emacs-lisp
(use-package! pyvenv
  :config
  (setq pyvenv-post-activate-hooks
        (list (lambda ()
                (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3")))))
  (setq pyvenv-post-deactivate-hooks
        (list (lambda ()
                (setq python-shell-interpreter "python3")))))

#+end_src
* Org
#+begin_src emacs-lisp
(use-package! org
  :ensure nil
  :config
  (setq org-directory "~/org/"
        org-agenda-files (list (concat org-directory "agenda.org"))
        org-default-notes-file (concat org-directory "notes.org")
        org-agenda-span 30
        org-hide-emphasis-markers t)
  (add-to-list 'org-refile-targets '(org-default-notes-file :maxlevel . 3))
  ;; disable org mode auto complete suggestions
  (add-hook! 'org-mode-hook #'(lambda () (company-mode -1)))
  ;; org blog
  (setq org-publish-project-alist
      '(("blog-html"
         :base-directory "~/dev/blog/"
         :base-extension "org"
         :publishing-directory "~/public_html/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4
         :auto-preamble t)
        ("blog-static"
         :base-directory "~/org/"
         :base-extension "ttf\\|woff2\\|scss\\|svg\\|css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory "~/public_html/"
         :recursive t
         :publishing-function org-publish-attachment))))
#+end_src
* Vertico
#+begin_src emacs-lisp
(map! :map vertico-map "C-l" #'vertico-directory-enter) ;; allow C-l to select an item
#+end_src
* Vterm
#+begin_src emacs-lisp
(map! :map vterm-mode-map :i "C-y" #'vterm-yank) ;; provide paste in insert mode
#+end_src
* Z-Notes
Potentially helpful hints.
#+begin_src emacs-lisp :tangle no
;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
