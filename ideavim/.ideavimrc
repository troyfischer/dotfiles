" Toggle the action 'IdeaVim: Track Action IDs' to show all actions

" leader key
let mapleader = ' '

set which-key

set NERDTree

set visualbell

" increase the timeoutlen (default: 1000), don't add space around the equal sign
set timeoutlen=5000

" map black whole register
noremap \ "_

" paste over without overwriting default register
xnoremap p P

" sync Vim clipboard with OS clipboard
set clipboard^=unnamed,unnamedplus

" jump between angle brackets
set matchpairs+=<:>

" smart line joining
set ideajoin

" open config
noremap <leader>oc :edit ~/.ideavimrc<cr>

" source config
noremap <leader>cs :source ~/.ideavimrc<cr>:nohlsearch<cr>

" highlight search results
set hlsearch

" remove search highlights
nnoremap <Esc> :nohlsearch<cr>

" case-insensitive search
set ignorecase

" enable case-sensitive search when uppercased letter is present
set smartcase

" search while typing
set incsearch

" consider camelCase and snake_case words when jumping between words

" move to the beginning of the next word
map w [w

" move to the end of the next word
map e ]w

" move to the beginning of the previous word
map b [b

" move to the end of the previous word
map ge ]b

" splits
let g:WhichKeyDesc_windows        = "<Space>w  Windows"

let g:WhichKeyDesc_windows_left        = "<Space>wh  left"
nnoremap <leader>wh <C-w>h

let g:WhichKeyDesc_windows_right        = "<Space>wl  right"
nnoremap <leader>wl <C-w>l

let g:WhichKeyDesc_windows_down        = "<Space>wj  down"
nnoremap <leader>wj <C-w>j

let g:WhichKeyDesc_windows_up        = "<Space>wk  up"
nnoremap <leader>wk <C-w>k

let g:WhichKeyDesc_windows_up        = "<Space>wk  up"
map <leader>wv <Action>(SplitVertically)
map <leader>ws <Action>(SplitHorizontally)
map <leader>wd <Action>(Unsplit)
map <leader>wmm <Action>(UnsplitAll)

" Buffers
map <leader>bp <Action>(PreviousTab)
map <leader>bn <Action>(NextTab)


" Save file
map <leader>fs <Action>(SaveDocument)
map <leader>ff <Action>(GotoFile)

" GoTos
map <leader>fc <Action>(GotoClass)
map <leader>fS <Action>(GotoSymbol)
map <leader>fa <Action>(GotoAction)
map <leader>fd <Action>(GotoDeclaration)
map <leader>fy <Action>(GotoTypeDeclaration)
map <leader>fi <Action>(GotoImplementation)
map <leader>ft <Action>(GotoTest)
map <leader>fm <Action>(GotoSuperMethod)
map <leader>fl <Action>(GotoLine)

map <leader>ug <Action>(FindUsages)
map <leader>uu <Action>(ShowUsages)
map <leader>vs <Action>(ViewSource)
map <leader>im <Action>(QuickImplementations)
map <leader>td <Action>(QuickTypeDefinition)
map <leader>ti <Action>(ExpressionTypeInfo)
map <leader>sh <Action>(ShowHoverInfo)
map <leader>oo <Action>(FileStructurePopup)

map <S-f> <Action>(Find)
map <S-r> <Action>(Replace)
map <leader>fp <Action>(FindInPath)
map <leader>fr <Action>(ReplaceInPath)

map <leader>rn <Action>(RenameElement)
map <leader>rm <Action>(ExtractMethod)
map <leader>rv <Action>(IntroduceVariable)
map <leader>rf <Action>(IntroduceField)
map <leader>rs <Action>(ChangeSignature)
map <leader>rr <Action>(Refactorings.QuickListPopupAction)

map <leader>aa <Action>(ShowIntentionActions)
map <leader>sw <Action>(SurroundWith)
map <S-space> <Action>(Generate)
map <S-k> <Action>(EditorDuplicateLines)
map <C-[> <Action>(EditorCompleteStatement)

map <leader>en <Action>(GotoNextError)
map <leader>ep <Action>(GotoPreviousError)
map <leader>lc <Action>(JumpToLastChange)
map <leader>ll <Action>(RecentLocations)
map <C-;> <Action>(RecentFiles)
map <S-k> <Action>(Forward)
map <S-l> <Action>(Back)
map <A-[> <Action>(MethodUp)
map <A-]> <Action>(MethodDown)

" map <leader><leader> <Action>(ReformatCode)
map <leader>co <Action>(OptimizeImports)
map <leader>ra <Action>(RearrangeCode)

" map <C-k> <Action>(MoveLineDown)
" map <C-l> <Action>(MoveLineUp)
" map <C-i> <Action>(MoveStatementDown)
" map <C-o> <Action>(MoveStatementUp)

map <leader>yp <Action>(CopyAbsolutePath)
map <leader>yf <Action>(CopyFileName)
map <leader>yr <Action>(CopyContentRootPath)

map <leader>x <Action>(NewScratchFile)
map <leader>bk <Action>(CloseContent)
map <leader>bK <Action>(CloseAllEditors)
nnoremap <leader><leader> :action GotoFile<cr>
map <leader>nd <Action>(NewDir)
map <leader>re <Action>(RenameFile)
map <leader>of <Action>(OpenFile)
map <leader>ri <Action>(RestartIde)


" debugger
map <leader>dn <Action>(StepOver)
map <leader>di <Action>(StepInto)
map <leader>dI <Action>(StepIntoMyCode)
map <leader>dr <Action>(Rerun)
map <leader>ds <Action>(Debug)
map <leader>dq <Action>(Stop)
map <leader>dt <Action>(ToggleLineBreakpoint)


" run
map <leader>rc <Action>(RunClass)